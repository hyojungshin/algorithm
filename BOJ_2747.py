### 2747
### 피보나치 수

# 피보나치 수는 0과 1로 시작한다. 0번째 피보나치 수는 0이고, 1번째 피보나치 수는 1이다. 그 다음 2번째 부터는 바로 앞 두 피보나치 수의 합이 된다.
# 이를 식으로 써보면 Fn = Fn-1 + Fn-2 (n ≥ 2)가 된다.
# n=17일때 까지 피보나치 수를 써보면 다음과 같다.
# 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597
# n이 주어졌을 때, n번째 피보나치 수를 구하는 프로그램을 작성하시오.

# 입력
# 첫째 줄에 n이 주어진다. n은 45보다 작거나 같은 자연수이다.

# 출력
# 첫째 줄에 n번째 피보나치 수를 출력한다.

n = int(input())
array = [0, 1]

for i in range(2, n+1):
    number = array[i-2] + array[i-1]
    array.append(number)
        
print(array[n])


## 재귀호출 사용하면 논리적으로 가능하나 시간초과 발생
# 원인 : 트리 구조 그래프를 재귀적으로 호출하면 중복 발생, 거의 2배의 복잡도로 계산됨 O(2**n)
# n >= 10이면 2**10 약 1000번 계산
# ㅜ >= 45이면 1000*1000*1000*1000*500 정도의 계산이 가능해야 해서 시간초과 발생
# 재귀호출 사용 불가, 단순한 계산식으로 접근

# def fibonacci(n):
#     if n == 0:
#         return 0
#     elif n == 1:
#         return 1
#     return fibonacci(n-2) + fibonacci(n-1)

# print(fibonacci(int(input)))

# 간단한 코드 예
#n = int(input())
# a, b = 0, 1

# while n > 0:
#     a, b = b, a + b
#     n -= 1

# print(a)
